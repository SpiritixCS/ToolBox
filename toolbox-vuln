import csv
import nmap
import requests
import subprocess
import ipaddress
import sys
import argparse
from tqdm import tqdm



BLUE = "\033[94m"
GREEN = "\033[92m"
RED = "\033[31m"
ENDC = "\033[0m"


def display_banner():
    banner = """
████████╗ ██████╗  ██████╗ ██╗     ██████╗  ██████╗ ██╗  ██╗
╚══██╔══╝██╔═══██╗██╔═══██╗██║     ██╔══██╗██╔═══██╗╚██╗██╔╝
   ██║   ██║   ██║██║   ██║██║     ██████╔╝██║   ██║ ╚███╔╝ 
   ██║   ██║   ██║██║   ██║██║     ██╔══██╗██║   ██║ ██╔██╗ 
   ██║   ╚██████╔╝╚██████╔╝███████╗██████╔╝╚██████╔╝██╔╝ ██╗
   ╚═╝    ╚═════╝  ╚═════╝ ╚══════╝╚═════╝  ╚═════╝ ╚═╝  ╚═╝
         Justine Fort - Evan Dessert - Mathis Fecan          
"""
    print(BLUE + banner + ENDC)



# Function to validate an IP address
def validate_ip_address(ip_address):
    try:
        ipaddress.ip_address(ip_address)
        return True
    except ValueError:
        return False

def validate_network_range(network_range):
    try:
        ipaddress.ip_network(network_range)
        return True
    except ValueError:
        return False

def choose_scan_type():
    try:
        scan_type = input("Do you want to scan an IP or a range? (I/R): ").lower()
        if scan_type == 'i' or scan_type == 'r':
            return scan_type
        else:
            raise ValueError("Invalid input. Please enter 'IP' or 'range'.")
    except ValueError as ve:
        print(ve)
        sys.exit(1)

def ask_ip_range(scan_type):

    if scan_type == "i":

        while True:
            adresse_ip = input(ENDC + "Entrez une adresse IP : ")
            if validate_ip_address(adresse_ip):
                return adresse_ip
                break
            else:
                print(RED +"Format d'adresse IP invalide. Veuillez entrer une adresse IP valide.")
   
    elif scan_type == "r":
        while True:
            network_range = input(ENDC + "Entrez une adresse réseau (192.168.1.0/24) : ")
            if validate_network_range(network_range):
                return network_range
                break
            else:
                print(RED +"Format d'adresse réseau invalide. Veuillez entrer une adresse valide.")
    

def net_fullscan_ask():
    net_fullscan_asking = input(ENDC + "Souhaitez vous effecture un scan en profondeur pour chauqe hote découvert ? (O/n)").lower()

    if net_fullscan_asking == "o" or net_fullscan_asking == "":
        net_fullscan = True
    else:
        net_fullscan = False

    return net_fullscan


# Function to perform a simple port scan
def simple_scan():
    
    result_list = []
    scanner = nmap.PortScanner()

    try:
        scanner.scan(adresse_ip, arguments='-T5 -Pn -p 8888')
    except nmap.PortScannerError as e:
        print("Erreur lors de l'analyse de l'adresse IP :", e)
        return None, None

    for host in scanner.all_hosts():
        if 'tcp' in scanner[host]:
            for port in scanner[host]['tcp'].keys():
                state = scanner[host]['tcp'][port]['state']
                if state == 'open':
                    result_list.append(port)

    try:
        if not (result_list):
            raise ValueError(RED + "❌ No open port found on the specified host." + ENDC)
        else :
            print (f"Ports ouvers: {str(result_list)}\n")
        return result_list
    except ValueError as ve:
        print(ve)
        sys.exit(1)


def network_simple_scan(network_range):
    hosts_list = []
    scanner = nmap.PortScanner()

    try:
        scanner.scan(network_range, arguments='-T5 -sn -PU -PS -PA')
    except nmap.PortScannerError as e:
        print("Erreur lors de l'analyse du réseau :", e)
        sys.exit(1)
        return None, None
        

    for host in scanner.all_hosts():
        hosts_list.append(host)
        hostcount = len(hosts_list)
    try:
        if not (hosts_list):
            raise ValueError(RED + "❌ No available host found on the specified network." + ENDC)
        else :
            print (BLUE + f"Available Hosts:{ENDC}\n{hosts_list}\n")
            print (BLUE + f"Nobre d'hotes : {hostcount}")

        return network_range and hosts_list
    
    except ValueError as ve:
        print(ve)
        sys.exit(1)


# Function to perform a detailed port scan
def better_scan(adresse_ip, result_list):
    scanner_ports = nmap.PortScanner()
    arguments = '--script vuln -p ' + ','.join(map(str, result_list))
    scanner_ports.scan(adresse_ip, arguments=arguments)
    report = []

    return report


def network_fullscan(net_fullscan, hosts_list):
    result_dict_nw = {}  # Dictionnaire pour stocker les ports découverts pour chaque adresse IP

    if net_fullscan == True:
        print("ok")
        # Create a tqdm progress bar with the total number of hosts
        print(BLUE + f"Début du scan de ports sur {len(hosts_list)} hôtes" + ENDC)
        with tqdm(total=len(hosts_list)) as pbar:
            for hote in hosts_list:
                scanner = nmap.PortScanner()
            
                try:
                    scanner.scan(hote, arguments='-T5 -Pn -p 8000,8080')
                except nmap.PortScannerError as e:
                    print("Erreur lors de l'analyse de l'adresse IP :", e)
                    return None, None

                for host in scanner.all_hosts():
                    if 'tcp' in scanner[host]:
                        for port in scanner[host]['tcp'].keys():
                            state = scanner[host]['tcp'][port]['state']
                            if state == 'open':
                                if host not in result_dict_nw:
                                    result_dict_nw[host] = []  # Initialise une liste vide pour cette adresse IP
                                result_dict_nw[host].append(port)

                # Update the progress bar
                pbar.update(1)

            print(f"\n")
        print(result_dict_nw)
    else:
        try:
            raise ValueError(RED + "❌ Pas de scans avancés des hôtes.")
        except ValueError as ve:
            print(ve)
            sys.exit(1)



display_banner()
scan_type = choose_scan_type()

if scan_type == "r":
    network_range = ask_ip_range(scan_type)
    hosts_list = network_simple_scan(network_range)
    net_fullscan = net_fullscan_ask()
    if net_fullscan == True:
        network_fullscan(net_fullscan,hosts_list)


else:
    adresse_ip = ask_ip_range(scan_type)
    result_list = simple_scan()

    #Perform the detailed scan and export results to CSV
    report = better_scan(adresse_ip, result_list)
